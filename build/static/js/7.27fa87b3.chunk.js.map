{"version":3,"sources":["components/custom/Toast.jsx","components/custom/CustomTextField.jsx","components/custom/CustomButton.jsx","components/login/Login.jsx","pages/LoginPage.jsx"],"names":["Toast","props","position","description","title","onClose","show","toastRef","useRef","setTimeout","role","className","ref","onClick","useStyles","makeStyles","theme","root","margin","spacing","fontSize","width","CustomTextField","id","onChange","value","label","type","error","helperText","classes","memo","backgroundColor","CustomButton","children","variant","color","Login","dispatch","useDispatch","history","useHistory","React","useState","email","setEmail","password","setPassword","setError","setShow","errorTextRef","loginText","tabIndex","autoComplete","e","target","event","preventDefault","registeredUser","JSON","parse","localStorage","getItem","sessionStorage","setItem","token","setAuthenticated","push","invalidUser","current","focus","to","newAccountText","LoginPage"],"mappings":"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","file":"static/js/7.27fa87b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useRef } from 'react';\r\nimport './Toast.scss';\r\n\r\nconst Toast = props => {\r\n    const { position, description, title, onClose,show} = props;\r\n    const toastRef = useRef();\r\n\r\n    if(show){\r\n        setTimeout(()=>{\r\n            onClose();\r\n        },5000)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section role=\"alert\"  className={show ? `notification-container ${position} ${title}` : 'notification-close'}>\r\n                <div className={`notification toast ${position}`}>\r\n                    <div ref={toastRef} className=\"notification-heading\">\r\n                        <h4 className=\"notification-title\">{title}</h4>\r\n                        <button data-testid=\"toast-close-btn\" onClick={onClose}>X</button>\r\n                    </div>\r\n                    <p className=\"notification-message\">\r\n                        {description}\r\n                    </p>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Toast;","import { TextField } from \"@material-ui/core\"\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { memo } from \"react\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& .MuiTextField-root': {\r\n        margin: theme.spacing(1),\r\n      },\r\n      '& .MuiInputBase-input':{\r\n        fontSize:12\r\n      },\r\n      '& .MuiInputLabel-root':{\r\n        fontSize:12\r\n      },\r\n        width:'100%',\r\n        margin: '10px 0px',\r\n    },\r\n  }));\r\n\r\nconst CustomTextField = ({id,onChange,value,label,type,error,helperText},props) => {\r\n    const classes = useStyles();\r\n    return <TextField \r\n            {...props} \r\n            className={classes.root}\r\n            error={error} \r\n            helperText={helperText} \r\n            id={id} \r\n            value={value} \r\n            onChange={onChange} \r\n            label={label} \r\n            type={type}\r\n          />\r\n}\r\n\r\nexport default memo(CustomTextField);","import { Button } from \"@material-ui/core\"\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { memo } from \"react\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width:'100%',\r\n        margin: '10px 0px',\r\n        backgroundColor:'#b72f60'\r\n    },\r\n  }));\r\n\r\nconst CustomButton = ({onClick,id,children,type,value},props) => {\r\n    const classes = useStyles();\r\n    return <Button {...props} className={classes.root} type={type} value={value}  variant=\"contained\" color=\"secondary\" onClick={onClick} id={id}>{children}</Button>\r\n}\r\n\r\nexport default memo(CustomButton)","import React, { useRef } from 'react'\r\nimport { set } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { invalidUser, loginText, newAccountText, token } from '../../constants';\r\nimport { setAuthenticated } from '../../redux/actions';\r\nimport CustomButton from '../custom/CustomButton';\r\nimport CustomTextField from '../custom/CustomTextField';\r\nimport CustomLink from '../custom/NavLink';\r\nimport Toast from '../custom/Toast';\r\nconst Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const [email, setEmail] = React.useState(\"\")\r\n    const [password, setPassword] = React.useState(\"\")\r\n    const [error, setError] = React.useState('')\r\n    const [show, setShow] = React.useState(false)\r\n    const errorTextRef = useRef();\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        const registeredUser = JSON.parse(localStorage.getItem('formData'))\r\n        if (registeredUser) {\r\n            if ((email === registeredUser.email) && (password === registeredUser.password)) {\r\n                sessionStorage.setItem('auth-token', token);\r\n                dispatch(setAuthenticated(true))\r\n                setShow(true)\r\n                setTimeout(() => {\r\n                    history.push('/');\r\n                }, 2000)\r\n            } else {\r\n                setError(invalidUser)\r\n                errorTextRef.current.focus();\r\n            }\r\n        }\r\n        else {\r\n            setError(invalidUser)\r\n            errorTextRef.current.focus();\r\n        }\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <div className=\"flex-div\">\r\n            <section className=\"align-left margin-top\">\r\n                <h2>Login</h2>\r\n                <p>{loginText}</p>\r\n            </section>\r\n            <section className=\"auth-form\">\r\n                <p tabIndex={0} className=\"error-text\" ref={errorTextRef}>{error}</p>\r\n                <form autoComplete=\"on\">\r\n                    <CustomTextField\r\n                        label=\"Email\"\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        id=\"email\"\r\n                    />\r\n                    <CustomTextField\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        id=\"password\"\r\n                    />\r\n                    <CustomButton\r\n                        tabIndex={-1}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={handleClick}\r\n                        id=\"register\">\r\n                        Sign In\r\n                    </CustomButton>\r\n                </form>\r\n                <CustomLink to=\"/register\">{newAccountText}</CustomLink>\r\n            </section>\r\n        </div>\r\n        <Toast\r\n            show={show}\r\n            position=\"top-right\"\r\n            description=\"Welcome, you are successfully Logged In\"\r\n            title=\"Success\"\r\n            onClose={() => setShow(false)}\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default Login","import Login from '../components/login/Login';\r\n\r\nconst LoginPage = () => {\r\n    return <><Login /></>\r\n}\r\n\r\nexport default LoginPage;"],"sourceRoot":""}